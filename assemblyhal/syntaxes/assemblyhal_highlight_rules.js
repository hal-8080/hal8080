/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from assemblyhal.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var assemblyhalHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#main"
        }],
        "#main": [{
            token: "comment.assemblyhal",
            regex: /#.*/
        }, {
            token: "constant.character.assemblyhal",
            regex: /\w+:/
        }, {
            token: "constant.character.assemblyhal",
            regex: /@\w+[\x003c\x003e]?/
        }, {
            token: "keyword.assemblyhal",
            regex: /(?:N?AND|ORN?|ADD|MUL|DIV|XOR|SHIFT[LR]|INV|POW|SUB|CP|RAND)\s/
        }, {
            token: "keyword.assemblyhal",
            regex: /(?:LD|ST)\s/
        }, {
            token: "keyword.assemblyhal",
            regex: /DISP(?:RC[LMR]|RH[LR]|C[LMR])\s/
        }, {
            token: "keyword.assemblyhal",
            regex: /(?:BNEG|BZERO|BA|SETHI|SETLO)\s/
        }, {
            token: "variable.assemblyhal",
            regex: /\$r[0-9B-F]/
        }, {
            token: "constant.other.assemblyhal",
            regex: /\$(?:RET|m[1-3]|d[B-F]|dAD|dVAL|dPC|dIR|PC|IR)/
        }, {
            token: "constant.numeric.assemblyhal",
            regex: /\b\d+/
        }, {
            token: "constant.numeric.assemblyhal",
            regex: /"(?:[01]{1,5}|[01]{8}|[01]{16})"/
        }, {
            token: "constant.numeric.assemblyhal",
            regex: /x"(?:[0-9A-F]{1,2}|[0-9A-F]{4})"/
        }, {
            token: "invalid.assemblyhal",
            regex: /\$(?:rA|dA)/
        }]
    }
    
    this.normalizeRules();
};

assemblyhalHighlightRules.metaData = {
    fileTypes: ["assh"],
    name: "assemblyhal",
    scopeName: "source.assemblyhal"
}


oop.inherits(assemblyhalHighlightRules, TextHighlightRules);

exports.assemblyhalHighlightRules = assemblyhalHighlightRules;
});