#             HAL8080 Processor               #
# Kasper, Dennis, Tjeerd, Nick, Oussama 2020  #
#        AssemblyHal Syntax Definition        #
# This file is run with eeyo.io/iro           #
# and defines the syntax (highlighting)       #
# of the AssemblyHal code.                    #

name                   = assemblyhal
file_extensions []     = assh;

# ========================= #
#          STYLING          #
# ========================= #

styles [] {
   
   # Comment. Nice green italic.
   .comment : style {
      color                 = light_green
      italic                = true
      ace_scope             = comment
      textmate_scope        = comment
      pygments_scope        = Comment
   }

   # Assembler constants
   .assembler_constant : style {      
      color                    = cyan
      ace_scope                = entity.name.tag
      textmate_scope           = entity.name.tag
      pygments_scope           = Name.Builtin
   }
   
   # Label. (Sort of constant)
   .label : style {
      color                 = gold
      ace_scope             = entity.name.function
      textmate_scope        = entity.name.function
      pygments_scope        = Name.Function
   }
   
   # Instruction. AssemblyHal instruction
   .instruction : style {
      color                 = orange
      ace_scope             = string
      textmate_scope        = string
      pygments_scope        = String
   }
   
   # Register (Sort of variable)
   .register : style {
      color                 = light_blue
      ace_scope             = variable
      textmate_scope        = variable
      pygments_scope        = Name.Variable
   }
   
   #BIOS Register
   .bios_register : style {
      color                 = light_blue
      bold                  = true
      ace_scope             = variable.other.constant
      textmate_scope        = variable.other.constant
      pygments_scope        = Name.Builtin
   }
   
   
   # Constant (Numeric)
   .constant : style {
      color                 = green
      ace_scope             = constant.numeric
      textmate_scope        = constant.numeric
      pygments_scope        = Number
   }

   # Illegal registers etc.
   .illegal : style {
      color                 = white
      background_color      = red
      ace_scope             = invalid
      textmate_scope        = invalid
      pygments_scope        = Generic.Error
   }
   
}
   
# ========================= #
#          CONTEXT          #
# ========================= #
   
contexts [] {

   main : context {
   
      # Comments
      : pattern {
         regex          \= (#.*)
         styles []       = .comment;
      }

      # Special Assembler variables
      : pattern {
         regex          \= (@\w+@[<>]?)
         styles []       = .assembler_constant;
      }
   
      # Labels
      : pattern {
         regex          \= (\w+:)
         styles []       = .label;
      }
      : pattern {
         regex          \= (@\w+[<>]?)
         styles []       = .label;
      }
   
      # Instructions
      : pattern { # Special
         regex \= ((PUT)\s)
         styles []       = .instruction;
      }
      : pattern { # Arithmetic
         regex \= ((?:N?AND|ORN?|ADD|MUL|DIV|XOR|SHIFT[LR]|INV|POW|SUB|CP|RAND)\s)
         styles []       = .instruction;
      }
      : pattern { # Memory
         regex \= ((?:LD|ST)\s)
         styles []       = .instruction;
      }
      : pattern { # Display
         regex \= (DISP(?:RC[LMR]|RH[LR]|C[LMR])\s)
         styles []       = .instruction;
      }
      : pattern { # Branch/Set
         regex \= ((?:BNEG|BZERO|BA|CALL|SETHI|SETLO)\s)
         styles []       = .instruction;
      }
      : pattern { # Return no space needed
         regex \= (RET)
         styles []       = .instruction;
      }
   
      # Registers
      : pattern {
         regex          \= (\$r[2-9B-F])
         styles []       = .register;
      }
   
      # Debug Registers
      : pattern {
         regex  \= (\$(?:RET|m[1-3]|d[B-F]|dAD|dVAL|dPC|dIR|PC|IR|r0|r1))
         styles []       = .bios_register;
      }
      
      # Constants
      : pattern { # Decimal
         regex          \= (\b\d+)
         styles []       = .constant;
      }
      : pattern { # Binary
         regex          \= ("(?:[01]{1,5}|[01]{8}|[01]{16})")
         styles []       = .constant;
      }
      : pattern { # Hex
         regex          \= (x"(?:[0-9A-F]{1,2}|[0-9A-F]{4})")
         styles []       = .constant;
      }
   
      # INVALID THINGS
      : pattern {
         regex          \= (\$(?:rA|dA))
         styles []       = .illegal;
      }
      
   }
   
}