# $RET = Call Return Address
# $dA = ASSEMBLERBRANCH
# $dB = TempVal2
# $dC = TempVal1 
# $dD = ButtonState 
# $dE = LeverState 
# $dF = TempAddr
# $dAD = dbgAddr
# $dVAL = dbgValue 
# $dPC = dbgPC 
# $dIR = dbgIR 
# $PC = Program Counter
# $IR = Instruction Register

@DBGREGISTRIES@ = x"AAAA"
@DBGFLAGS@ = x"AAAA"
@USERMEM@ = x"AAAA"
@LEVERSTATE@ = x"AAAA"
@BUTTONSTATE@ = x"AAAA"
@PREVBUTTONSTATE@ = x"AAAA"


	# Set controller to use debug flags and registries
SETHI $dC, x"00"
SETLO $dC, x"01"
ST $dC, @DBGREGISTRIES@
ST $dC, @DBGFLAGS@

	# Store address of start of user program in dbgPC
LD $dPC, @USERMEM@ 					
	# Store first user program instruction in dbgIR
LD $dIR, $dPC				
LD $dD, @BUTTONSTATE@
ST $dD, @PREVBUTTONSTATE@

STARTJUMP:
	# Set controller to use debug flags and registries
	SETHI $dC, x"00"
	SETLO $dC, x"01"
	ST $dC, @DBGREGISTRIES@
	ST $dC, @DBGFLAGS@

	LD $dE, @LEVERSTATE@	
	
		# Check if lever 8 is HIGH
		# 	if off 	jump to MEMORYMODE
		# 	else 	jump to STEPMODE
	SETHI $dC, x"00"
	SETLO $dC, x"80"
	AND $dC, $dE
	BZERO @MEMORYMODE
	BA @STEPMODE



STEPMODE:
		# Copy the user PC and user IR to dbgAddr en dbgValue so a single display subroutine can be used 
	CP $dAD, $dPC
	CP $dVAL, $dIR	
	
		# Check which button went from 0 to 1, store results in $dC
	LD $dD, @BUTTONSTATE@
	LD $dC, @PREVBUTTONSTATE@
	INV $dC, $dC
	AND $dC, $dD
	ST $dD, @PREVBUTTONSTATE@
	
		# Check if button 3 is HIGH
		# 	If LOW, display value
		# 	If HIGH, execute instruction
	SETHI $dB, x"10"
	SETLO $dB, x"00"
	AND $dC, $dB
	BZERO @ADDRESVALUEDISPLAY

			# # # # # EXECUTE USER INSTRUCTION # # # # # 
	LD $dIR, $dPC		# Should not be needed, but doesn't hurt to put here anyways
	CP $dC, $dIR
	SETHI $dB, x"C0"
	SETLO $dB, x"00"	# $dB = 1100 0000 00000 0000
	
	SHIFTR $dC, 6
	SETLO $dC, x"00"
	SHIFTL $dC, 6
	
	SUB $dC, $dB 	# Check if its a branch instruction
	BZERO @PANICITSABRANCHINSTRUCTION
	BA @NOTBRANCHINSTR
	
PANICITSABRANCHINSTRUCTION:
	CP $dC, $dIR
	SHIFTL $dC, 3
	SETLO $dC, x"00"
	SHIFTL $dC, 4 	# COND 0000 0000 0000
	
	SETLO $dB, x"00"
	SETHI $dB, x"40"
	SUB $dB, $dC
	BZERO @USERCALLINSTRUCTION 	# Check if the instruction is a call instruction = 0100
	
	SETLO $dB, x"00"
	SETHI $dB, x"50"
	SUB $dB, $dC
	BZERO @USERRETURNINSTRUCTION 	# Check if the instruction is a return instruction = 0101
	
	SETLO $dB, x"00"
	SETHI $dB, x"00"
	SUB $dB, $dC
	BZERO @BNEGCHECK 	# Check if the instruction is a BNEG instruction = 0000
	
	SETLO $dB, x"00"
	SETHI $dB, x"10"
	SUB $dB, $dC
	BZERO @BZEROCHECK 	# Check if the instruction is a BZERO instruction = 0001
	
	BA @HOP	# If its a branch instruction and not call, return, bneg, bzero, it must be a branch always
	
USERCALLINSTRUCTION:
	CP $RET, $dPC
	BA @HOP

USERRETURNINSTRUCTION:
	CP $dPC, $RET
	LD $dIR, $dPC
	BA @STARTJUMP
	
BNEGCHECK:
	SETHI $dC, x"00"
	SETLO $dC, x"00"
	ST $dC, @DBGFLAGS@
	BNEG @HOP
	BA @NOHOP
	
BZEROCHECK:
	SETHI $dC, x"00"
	SETLO $dC, x"00"
	ST $dC, @DBGFLAGS@
	BZERO @HOP
	BA @NOHOP

HOP:
	SETHI $dC, x"00"
	SETLO $dC, x"01"
	ST $dC, @DBGFLAGS@
	# 
	# Get jump address and put in PC 	DEPENDS ON HOW FLAGS WORK
	# 
	LD $dIR, $dPC
	BA @STARTJUMP
	
NOHOP:
	SETHI $dC, x"00"
	SETLO $dC, x"01"
	ST $dC, @DBGFLAGS@
	ADD $dPC, "00010"
	LD $dIR, $dPC
	BA @STARTJUMP
	
NOTBRANCHINSTR:
	SETHI $dC, x"00"
	SETLO $dC, x"00"
	ST $dC, @DBGFLAGS@
	ST $dIR, @instr
	ST $dC, @DBGREGISTRIES@
instr:
	PUT 0000000000000000 # DUMMY INSTRUCTION: AND $r0, $r0
	SETHI $dC, x"00"
	SETLO $dC, x"01"
	ST $dC, @DBGFLAGS@
	ST $dC, @DBGREGISTRIES@
	ADD $dPC, "00010"
	LD $dIR, $dPC
	BA @STARTJUMP



ADDRESVALUEDISPLAY:
		# Check if lever 7 is HIGH
		# 	if off 	jump to DISPLAYVALUE
		# 	else 	jump to DISPLAYADDRES
	SETHI $dC, x"01"
	SETLO $dC, x"00"
	AND $dC, $dE
	BZERO @DISPLAYVALUE
	BA @DISPLAYADDRES

DISPLAYVALUE:
	DISPRHR $dVAL
	BA @STARTJUMP

DISPLAYADDRES:
	DISPRHR $dAD
	BA @STARTJUMP

